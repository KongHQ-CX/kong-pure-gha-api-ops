name: create-release

on:
  push:
    branches:
      - main

jobs:
  release:
    name: "Create Release"

    runs-on: "ubuntu-latest"
    container:
      image: ubuntu:22.04
      options: "--user root --cpus 1"  # run as root doesn't matter, we can't do any damage to GitHub
      volumes:
        - ./:/repository

    steps:
      - name: "Determine tag"
        run: |
          #!/bin/bash

          apt update && apt install -y git zip unzip

          #get highest tag number
          VERSION=`git describe --abbrev=0 --tags`
          
          #replace . with space so can split into an array
          VERSION_BITS=(${VERSION//./ })
          
          #get number parts and increase last one by 1
          VNUM1=${VERSION_BITS[0]}
          VNUM2=${VERSION_BITS[1]}
          VNUM3=${VERSION_BITS[2]}
          VNUM1=`echo $VNUM1 | sed 's/v//'`
          
          # Check for #major or #minor in commit message and increment the relevant version number
          MAJOR=`git log --format=%B -n 1 HEAD | grep '#major'`
          MINOR=`git log --format=%B -n 1 HEAD | grep '#minor'`
          
          if [ "$MAJOR" ]; then
              echo "Update major version"
              VNUM1=$((VNUM1+1))
              VNUM2=0
              VNUM3=0
          elif [ "$MINOR" ]; then
              echo "Update minor version"
              VNUM2=$((VNUM2+1))
              VNUM3=0
          else
              echo "Update patch version"
              VNUM3=$((VNUM3+1))
          fi
          
          
          #create new tag
          NEW_TAG="v$VNUM1.$VNUM2.$VNUM3"
          
          echo "Updating $VERSION to $NEW_TAG"
          
          #get current hash and see if it already has a tag
          GIT_COMMIT=`git rev-parse HEAD`
          NEEDS_TAG=`git describe --contains $GIT_COMMIT`
          
          #only tag if no tag already (would be better if the git describe command above could have a silent option)
          if [ -z "$NEEDS_TAG" ]; then
              echo "Tagged with $NEW_TAG (Ignoring fatal:cannot describe - this means commit is untagged) "
              git tag $NEW_TAG
              git push --tags
          else
              echo "Already a tag on this commit"
          fi

          echo "\"RELEASE_TAG=${NEW_TAG}\"" >> $GITHUB_ENV

      - name: "Create release"
        uses: "actions/github-script@v6"
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            try {
              const response = await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: true,
                name: process.env.RELEASE_TAG,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: process.env.RELEASE_TAG,
              });

              core.exportVariable('RELEASE_ID', response.data.id);
              core.exportVariable('RELEASE_UPLOAD_URL', response.data.upload_url);
            } catch (error) {
              core.setFailed(error.message);
            }
